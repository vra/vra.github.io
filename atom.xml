<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yunfeng&#39;s Simple Blog</title>
  
  <subtitle>Love, Life, Linux</subtitle>
  <link href="http://vra.github.io/atom.xml" rel="self"/>
  
  <link href="http://vra.github.io/"/>
  <updated>2022-04-14T05:19:40.511Z</updated>
  <id>http://vra.github.io/</id>
  
  <author>
    <name>Yunfeng Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kinematics和dynamics含义辨析</title>
    <link href="http://vra.github.io/2022/04/13/kinematics-vs-dynamics/"/>
    <id>http://vra.github.io/2022/04/13/kinematics-vs-dynamics/</id>
    <published>2022-04-13T03:10:14.000Z</published>
    <updated>2022-04-14T05:19:40.511Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Kinematics is the study of how things move, while dynamics is the study of forces and motion. Kinematics is the study of motion. It is concerned with what happens to a body when it is at rest and in uniform motion. Dynamics is the study of forces and their effect on moving bodies.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Kinematics is the study of how things move, while dynamics is the study of forces and motion. Kinematics is the study of mot</summary>
      
    
    
    
    
    <category term="misc" scheme="http://vra.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>git 删除远程分支</title>
    <link href="http://vra.github.io/2022/04/10/git-delete-branch/"/>
    <id>http://vra.github.io/2022/04/10/git-delete-branch/</id>
    <published>2022-04-10T09:55:35.000Z</published>
    <updated>2022-04-14T05:18:46.308Z</updated>
    
    <content type="html"><![CDATA[<p>Git可以方便地删除本地的某个分支。具体操作是：</p><ol><li>切换到别的分支</li><li>执行<code>git branch -d &lt;name-of-branch-to-delete&gt;</code></li></ol><p>比如我想删除当前的<code>dev-tmp</code>分支:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git branch -d dev-tmp</span><br></pre></td></tr></table></figure><p>上面的命令只删除了本地的分支，如果要删除远端的分支，该怎么操作呢？答案是用带有<code>--delete</code>选项的<code>git push</code>命令，例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete dev-tmp</span><br></pre></td></tr></table></figure><p>可以删除远端的<code>dev-tmp</code>分支。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Git可以方便地删除本地的某个分支。具体操作是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;切换到别的分支&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;git branch -d &amp;lt;name-of-branch-to-delete&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如我想删除</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="Git" scheme="http://vra.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Xcode无法安装ios程序的一种情况记录</title>
    <link href="http://vra.github.io/2022/04/06/ios-cannot-install/"/>
    <id>http://vra.github.io/2022/04/06/ios-cannot-install/</id>
    <published>2022-04-06T06:06:46.000Z</published>
    <updated>2022-04-10T09:55:05.439Z</updated>
    
    <content type="html"><![CDATA[<p>在用Xcode调试ios代码的时候，发现代码可以正常编译，但是安装到手机的时候，提示”App installation failed: Could not write to the device”。在网上找了很多回答，都没能解决。后来发现原因是在要复制到ios的目录中添加了一个软链接，导致出错。删除软链接后，安装正常。这应该是一个比较少见的原因，记录一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在用Xcode调试ios代码的时候，发现代码可以正常编译，但是安装到手机的时候，提示”App installation failed: Could not write to the device”。在网上找了很多回答，都没能解决。后来发现原因是在要复制到ios的目录中添加了</summary>
      
    
    
    
    
    <category term="iOS" scheme="http://vra.github.io/tags/iOS/"/>
    
    <category term="Mac" scheme="http://vra.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>数字永存的一些想法</title>
    <link href="http://vra.github.io/2022/03/27/eternal-life/"/>
    <id>http://vra.github.io/2022/03/27/eternal-life/</id>
    <published>2022-03-27T14:15:43.000Z</published>
    <updated>2022-03-27T15:26:00.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>自古以来，人类就在思考自己与自然的关系，思考短暂人生与永恒时空的对比。从《论语》中的”子在川上曰，逝者如斯夫，不舍昼夜“，再到苏轼在《赤壁赋》中的“哀吾生之须臾，羡长江之无穷“，都体现了古代智者对人生的生老病死的思考。在漫长的历史中，只有少部分知识精英的思考和言论被记录下来，而大部分人们身上发生的故事，则在历史长河中湮灭了。一个例子是，我连我曾祖父之前的祖先的叫什么名字都不知道。</p><p>另一方面，随着互联网的出现，人类在数字世界里面记录着生活中的一切，朋友圈里面的自拍，与家人朋友的合影，快手上的短视频等等，在记录生活的同时，有意或无意地构建着自己的数字人生。当一个人在现实生活中去世后，他在数字世界里面的资产，包括图片，视频，音频都还存在（但这种存在不是永久的，可能因为保存这些资产的公司的经营而消失），某种程度上是永生在数字世界里。但目前的形式还没有明确的数字空间与真实空间的界限，拍摄的内容也都是2D的，除了观看，没法进行更多的交互。而随着苹果等大公司积极地推动AR技术，虚拟Avatar等技术也越来越成熟，大家也更能接受虚拟的主播，虚拟的歌手，虚拟的朋友。</p><p>随着渲染技术、AI技术以及硬件技术的不断发展，元宇宙的概念被越来越多的人所了解。不管是应用于何种场景，在元宇宙的概念里，现实生活中的人有对应的数字化身。这个数字化身是数字永存的一个核心。</p><p>设想这样一个场景，当一个人在世时构建好完美的3D数字化身，包括穿着的衣服重建，长相，发音，步态识别，以及最重要的，对于问题的思考方式和回应方式，那么在他去世后，当有亲友来到他的纪念室时，通过计算机技术，可以渲染出跟真实长相一样的ta，也能智能地回答问题，甚至声音都一样，那ta可以就算永生了。</p><p>为什么要设想这样一个场景呢？一个想法时想让人类的存在都能被记录，被看见，因为每个人身上都有值得后人纪念记录都闪光点和独有的故事。另一个想法是给后来人一个认清自己从哪里来的机会，避免出现三代以上，一字未知的现象。最后还是希望每个人有重新回忆亲人的机会。</p><h2 id="设想的场景"><a href="#设想的场景" class="headerlink" title="设想的场景"></a>设想的场景</h2><p>设想的场景如下。每个人有一个包含自己数字资产的U盘，由家人保存。同时有专门的数字形象进行展示的场所（比如叫数字永存展览馆），可以进行数字资产的重建和展示。当家人想要了解ta的生活的时候，可以拿着U盘去数字永存展览馆，对ta进行重建，观看他在生活中某天画的画，和家人在一起的画面，劳动的场景，以及对生活的思考。同时结合3D地球重建，可以看ta开车去玩时的路两边的风景，去乐山大佛时的大佛在他身旁展示出来。另外可以告诉他最近的新闻，他也会以他的方式来进行回复，和你一起讨论。</p><h2 id="涉及的技术"><a href="#涉及的技术" class="headerlink" title="涉及的技术"></a>涉及的技术</h2><p>这个场景涉及到的技术其实现在都有一些技术实现了一部分，但距离满足上述的场景还估计有至少有数十年的路要走。具体来说，有下面的子任务：</p><ul><li>听力和发音重建，听力包括能否听得懂方言，普通话，英语等，发音包括口音</li><li>人体重建：包括不同年龄段的头发重建，人脸重建，身体重建，微表情重建</li><li>衣物重建：每个时代有不同的服饰风格，每个人有自己喜欢的衣服，穿过的衣服，也需要重建，才足够真实</li><li>步态识别与重建：每个人走路也是不同的，只有步态重建好了，与数字形象沟通时才足够有真实感</li><li>知识体系重建：了解哪些知识，擅长哪些方面</li><li>思维习惯重建：面对一个问题，ta会怎么回复，这些需要通过日常的对话来重建</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之这是一个有点难，有点意义，但可能也会面临很多问题的事情。结合元宇宙，以及最近看的Upload电视剧，和今早一篇微信文章想到的一些点，这里把它记录下来，作为人生的一点思考，一个小的脚注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;自古以来，人类就在思考自己与自然的关系，思考短暂人生与永恒时空的对比。从《论语》中的”子在川上曰，逝者如斯夫，不舍昼夜“，再到苏轼在《赤壁赋</summary>
      
    
    
    
    
    <category term="数字空间" scheme="http://vra.github.io/tags/%E6%95%B0%E5%AD%97%E7%A9%BA%E9%97%B4/"/>
    
    <category term="技术畅想" scheme="http://vra.github.io/tags/%E6%8A%80%E6%9C%AF%E7%95%85%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>git log 修改提交日期显示格式</title>
    <link href="http://vra.github.io/2022/03/26/git-change-log-date-format/"/>
    <id>http://vra.github.io/2022/03/26/git-change-log-date-format/</id>
    <published>2022-03-26T13:34:49.000Z</published>
    <updated>2022-03-26T13:54:44.559Z</updated>
    
    <content type="html"><![CDATA[<p>git log 默认显示的日期格式是欧美形式的，使用起来不太习惯，还得在大脑中进行一次转换，有点费脑。后来发现有办法可以修改日期显示格式，在git仓库下执行下面的命令即可：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config log.date iso</span><br></pre></td></tr></table></figure><p>如果要对所有的git仓库都起作用，添加<code>--global</code>选项即可。</p><p>另外输入<code>git config</code> 按tab键，可以显示所有的配置选项。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;git log 默认显示的日期格式是欧美形式的，使用起来不太习惯，还得在大脑中进行一次转换，有点费脑。后来发现有办法可以修改日期显示格式，在git仓库下执行下面的命令即可：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="Git" scheme="http://vra.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git显示文件首次被跟踪的日期</title>
    <link href="http://vra.github.io/2022/03/26/git-show-first-added-time/"/>
    <id>http://vra.github.io/2022/03/26/git-show-first-added-time/</id>
    <published>2022-03-26T13:15:45.000Z</published>
    <updated>2022-03-26T13:34:22.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在使用Git的时候，想要显示某个文件首次被跟踪的时间，可以用下面的命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=%ad /path/to/file |tail -1</span><br></pre></td></tr></table></figure><p>管道操作前的命令是以默认日期格式显示所有包含这个文件的所有提交记录，从上往下依次为最新的最早的提交。管道操作后面的命令是提取前面的输出中最后一条记录，即最早的提交，这正是我们需要的。</p><p>各种关于git log的用法，参考上一篇博文。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在使用Git的时候，想要显示某个文件首次被跟踪的时间，可以用下面的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="Git" scheme="http://vra.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git log 常见参数总结</title>
    <link href="http://vra.github.io/2022/03/26/git-log/"/>
    <id>http://vra.github.io/2022/03/26/git-log/</id>
    <published>2022-03-26T12:59:55.000Z</published>
    <updated>2022-03-27T14:05:51.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-概述"><a href="#0-概述" class="headerlink" title="0. 概述"></a>0. 概述</h2><p>git log 是查看git提交记录的一个命令，它有非常多的控制参数和选项，合理使用的话，可以达到任何的精准控制目的。这里列一些日常使用可能会用到的用法，全部的用法，请在命令行<code>git help log</code>查看。</p><span id="more"></span><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h2><h3 id="1-1-无参数"><a href="#1-1-无参数" class="headerlink" title="1.1. 无参数"></a>1.1. 无参数</h3><p>使用<code>git log</code>，会从新到旧显示所有的提交记录，按<code>j</code>往下翻页，按<code>k</code>往上翻页, 按<code>q</code>退出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit 869cc0a22aea80d34f0728e184842bdea42fe43b (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Merge: 78aaac39 2e872840</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-10 02:29:06 +0200</span><br><span class="line"></span><br><span class="line">    Merge pull request <span class="comment">#2353 from JohanMabille/chunk</span></span><br><span class="line"></span><br><span class="line">    Refactoring of xchunked_view</span><br><span class="line"></span><br><span class="line">commit 2e872840a7ebc3e4e8b0f84cbae39360503243b1</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-09 16:59:16 +0200</span><br><span class="line"></span><br><span class="line">    One xchunk_iterator to rule them all</span><br><span class="line"></span><br><span class="line">commit 42fc49080522c94ea784541b53ef302ccb0344c0</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-08 22:40:14 +0200</span><br><span class="line"></span><br><span class="line">    Refactoring of xchunked_view</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>通过增加<code>-&lt;n&gt;</code>选项来显示最近n次的提交记录，如<code>git log -2</code>仅显示最近的2次提交；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit 869cc0a22aea80d34f0728e184842bdea42fe43b (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Merge: 78aaac39 2e872840</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-10 02:29:06 +0200</span><br><span class="line"></span><br><span class="line">    Merge pull request <span class="comment">#2353 from JohanMabille/chunk</span></span><br><span class="line"></span><br><span class="line">    Refactoring of xchunked_view</span><br><span class="line"></span><br><span class="line">commit 2e872840a7ebc3e4e8b0f84cbae39360503243b1</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-09 16:59:16 +0200</span><br><span class="line"></span><br><span class="line">    One xchunk_iterator to rule them all</span><br></pre></td></tr></table></figure><p>此外如果想显示每次提交代码修改的地方，可以增加<code>-p</code>参数:</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">commit 869cc0a22aea80d34f0728e184842bdea42fe43b (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Merge: 78aaac39 2e872840</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-10 02:29:06 +0200</span><br><span class="line"></span><br><span class="line">    Merge pull request #2353 from JohanMabille/chunk</span><br><span class="line"></span><br><span class="line">    Refactoring of xchunked_view</span><br><span class="line"></span><br><span class="line">commit 2e872840a7ebc3e4e8b0f84cbae39360503243b1</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-09 16:59:16 +0200</span><br><span class="line"></span><br><span class="line">    One xchunk_iterator to rule them all</span><br><span class="line"></span><br><span class="line"><span class="comment">diff --git a/include/xtensor/xchunked_array.hpp b/include/xtensor/xchunked_array.hpp</span></span><br><span class="line"><span class="comment">index ed4003d0..23a843ec 100644</span></span><br><span class="line"><span class="comment">--- a/include/xtensor/xchunked_array.hpp</span></span><br><span class="line"><span class="comment">+++ b/include/xtensor/xchunked_array.hpp</span></span><br><span class="line"><span class="meta">@@ -126,10 +128,16 @@</span> namespace xt</span><br><span class="line">         template &lt;class S&gt;</span><br><span class="line">         const_stepper stepper_end(const S&amp; shape, layout_type) const noexcept;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-        const shape_type&amp; chunk_shape() const;</span></span><br><span class="line"><span class="addition">+        const shape_type&amp; chunk_shape() const noexcept;</span></span><br><span class="line"><span class="addition">+        size_type grid_size() const noexcept;</span></span><br><span class="line"><span class="addition">+        const shape_type&amp; grid_shape() const noexcept;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">         chunk_storage_type&amp; chunks();</span><br><span class="line">         const chunk_storage_type&amp; chunks() const;</span><br><span class="line"></span><br><span class="line"><span class="addition">+        chunk_iterator_type chunk_begin();</span></span><br><span class="line"><span class="addition">+        chunk_iterator_type chunk_end();</span></span><br></pre></td></tr></table></figure><h3 id="1-2-显示统计信息"><a href="#1-2-显示统计信息" class="headerlink" title="1.2. 显示统计信息"></a>1.2. 显示统计信息</h3><p>增加<code>--stat</code>选项可以显示某次提交文件的修改信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit 869cc0a22aea80d34f0728e184842bdea42fe43b (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Merge: 78aaac39 2e872840</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-10 02:29:06 +0200</span><br><span class="line"></span><br><span class="line">    Merge pull request <span class="comment">#2353 from JohanMabille/chunk</span></span><br><span class="line"></span><br><span class="line">    Refactoring of xchunked_view</span><br><span class="line"></span><br><span class="line">commit 2e872840a7ebc3e4e8b0f84cbae39360503243b1</span><br><span class="line">Author: Johan Mabille &lt;johan.mabille@gmail.com&gt;</span><br><span class="line">Date:   2021-04-09 16:59:16 +0200</span><br><span class="line"></span><br><span class="line">    One xchunk_iterator to rule them all</span><br><span class="line"></span><br><span class="line"> include/xtensor/xchunked_array.hpp  |  45 ++++++++++-</span><br><span class="line"> include/xtensor/xchunked_assign.hpp | 246 +++++++++++++++++++++++++++++++++++++++++++++-------------</span><br><span class="line"> include/xtensor/xchunked_view.hpp   | 164 +++++++++++----------------------------</span><br><span class="line"> 3 files changed, 280 insertions(+), 175 deletions(-)</span><br></pre></td></tr></table></figure><h3 id="1-3-过滤选项"><a href="#1-3-过滤选项" class="headerlink" title="1.3. 过滤选项"></a>1.3. 过滤选项</h3><p>默认所有的提交都显示，如果我们想搜索某段时间或某个人的提交记录，该怎么办呢？git提供了详细的命令来进行过滤，下面详细举例说明。</p><h4 id="1-3-1-过滤作者"><a href="#1-3-1-过滤作者" class="headerlink" title="1.3.1. 过滤作者"></a>1.3.1. 过滤作者</h4><p>通过<code>--author</code>选项可以只显示某个人的提交记录，以这个仓库为例，下面的写法（FirstName，LastName, Email, FirstName + LastName, FirstName + LastName + Email）都可以:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=Johan</span><br><span class="line">git <span class="built_in">log</span> --author=Mabille</span><br><span class="line">git <span class="built_in">log</span> --author=johan.mabille@gmail.com</span><br><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;Johan Mabille&quot;</span></span><br><span class="line">git <span class="built_in">log</span> --author=<span class="string">&quot;Johan Mabille &lt;johan.mabille@gmail.com&gt;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-过滤代码关键字"><a href="#1-3-2-过滤代码关键字" class="headerlink" title="1.3.2. 过滤代码关键字"></a>1.3.2. 过滤代码关键字</h4><p>通过<code>-S&lt;keyword&gt;</code>的形式可以搜索代码中增加或删除<code>keyword</code>的提交记录，比如<code>git log -Sxchunked_array</code>就会显示所有关于<code>xchunked_array</code>关键字的提交。结合前面的<code>-p</code>和<code>-&lt;n&gt;</code>参数，我们能很好的达到我们的搜索目的，比如只显示最近两次提交中关键词的修改内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -Sxchunked_array -p -2</span><br></pre></td></tr></table></figure><h4 id="1-3-3-过滤提交信息中的关键字"><a href="#1-3-3-过滤提交信息中的关键字" class="headerlink" title="1.3.3. 过滤提交信息中的关键字"></a>1.3.3. 过滤提交信息中的关键字</h4><p>此外还可以利用<code>--grep</code>选项来对commit内容进行过滤，比如我们想搜索所有包含<code>fix</code>的提交：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --grep fix</span><br></pre></td></tr></table></figure><h4 id="1-3-4-过滤日期"><a href="#1-3-4-过滤日期" class="headerlink" title="1.3.4. 过滤日期"></a>1.3.4. 过滤日期</h4><p>另一个很有用的选项是根据日期来过滤提交。日期过滤有好多形式，比如今年以来的提交，最近一周的提交，git提供了详细的控制命令，具体如下表:</p><table><thead><tr><th>关键词</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>after=<xxx></td><td>从xxx到现在的所有提交</td><td>after=”2020-01-01”</td></tr><tr><td>since=<xxx></td><td>从xxx到现在的所有提交，与after同义</td><td>since=”2020-01-01”</td></tr><tr><td>before=<xxx></td><td>xxx之前的所有提交</td><td>before=”2020-01-01”</td></tr><tr><td>until=<xxx></td><td>xxx之前的所有提交，与before同义</td><td>until=”2020-01-01”</td></tr></tbody></table><p>日期格式如下：</p><table><thead><tr><th>时间格式</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>YYYY-MM-DD</td><td>到某个具体日期的提交</td><td>since=2020-01-01</td></tr><tr><td>n.minute</td><td>n分钟内的提交</td><td>since=3.minute</td></tr><tr><td>n.hour</td><td>n小时内的提交</td><td>since=3.hour</td></tr><tr><td>n.day</td><td>n天内的提交</td><td>since=3.day</td></tr><tr><td>n.week</td><td>n周内的提交</td><td>since=3.week</td></tr><tr><td>n.month</td><td>n个月内的提交</td><td>since=3.month</td></tr><tr><td>n.year</td><td>n年内的提交</td><td>since=1.year</td></tr><tr><td>组合</td><td>上述形式的组合</td><td>since=1.year,10.month</td></tr></tbody></table><p>比如要显示2天内的所有提交，可以用下面的命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --since=2.day</span><br></pre></td></tr></table></figure><h2 id="2-显示格式调整"><a href="#2-显示格式调整" class="headerlink" title="2. 显示格式调整"></a>2. 显示格式调整</h2><p>默认的显示格式比较松散，一次提交占的空间太大，有没有办法显示地更紧凑呢？是有的，可以通过<code>--format=oneline</code>来设置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">869cc0a22aea80d34f0728e184842bdea42fe43b (HEAD -&gt; master, origin/master, origin/HEAD) Merge pull request <span class="comment">#2353 from JohanMabille/chunk</span></span><br><span class="line">2e872840a7ebc3e4e8b0f84cbae39360503243b1 One xchunk_iterator to rule them all</span><br><span class="line">42fc49080522c94ea784541b53ef302ccb0344c0 Refactoring of xchunked_view</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>这下每条记录在一行显示，包括提交hash串，commit信息。</p><p>那么 git 支持哪些format参数呢，总结下来如下表：</p><table><tr><th>格式名称</th><th>格式说明</th></tr><tr><td><pre>oneline</pre></td><td><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">hash</span>&gt; &lt;title-line&gt;</span><br></pre></td></tr></table></figure></td></tr><tr><td><pre>short</pre></td><td><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit &lt;<span class="built_in">hash</span>&gt;</span><br><span class="line">Author: &lt;author&gt;</span><br><span class="line"></span><br><span class="line">&lt;title-line&gt;</span><br></pre></td></tr></table></figure></td></tr><tr><td><pre>medium</pre></td><td><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit &lt;<span class="built_in">hash</span>&gt;</span><br><span class="line">Author: &lt;author&gt;</span><br><span class="line">Date:   &lt;author-date&gt;</span><br><span class="line"></span><br><span class="line">&lt;title-line&gt;</span><br><span class="line"></span><br><span class="line">&lt;full-commit-message&gt;</span><br></pre></td></tr></table></figure></td></tr><tr><td><pre>full</pre></td><td><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit &lt;<span class="built_in">hash</span>&gt;</span><br><span class="line">Author: &lt;author&gt;</span><br><span class="line">Commit: &lt;committer&gt;</span><br><span class="line"></span><br><span class="line">&lt;title-line&gt;</span><br><span class="line"></span><br><span class="line">&lt;full-commit-message&gt;</span><br></pre></td></tr></table></figure></td></tr><tr><td><pre>fuller</pre></td><td><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">commit &lt;<span class="built_in">hash</span>&gt;</span><br><span class="line">Author:     &lt;author&gt;</span><br><span class="line">AuthorDate: &lt;author-date&gt;</span><br><span class="line">Commit:     &lt;committer&gt;</span><br><span class="line">CommitDate: &lt;committer-date&gt;</span><br><span class="line"></span><br><span class="line">&lt;title-line&gt;</span><br><span class="line"></span><br><span class="line">&lt;full-commit-message&gt;</span><br></pre></td></tr></table></figure></td></tr><tr><td><pre>reference</pre></td><td><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;abbrev-hash&gt; (&lt;title-line&gt;, &lt;short-author-date&gt;)</span><br></pre></td></tr></table></figure></td></tr><tr><td><pre>email</pre></td><td><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">From &lt;<span class="built_in">hash</span>&gt; &lt;date&gt;</span><br><span class="line">From: &lt;author&gt;</span><br><span class="line">Date: &lt;author-date&gt;</span><br><span class="line">Subject: [PATCH] &lt;title-line&gt;</span><br><span class="line"></span><br><span class="line">&lt;full-commit-message&gt;</span><br></pre></td></tr></table></figure></td></tr></table><p>还有一些别的选项，可以访问<a href="https://git-scm.com/docs/git-log#_pretty_formats">这里</a>详细了解。</p><h2 id="3-自定义显示"><a href="#3-自定义显示" class="headerlink" title="3. 自定义显示"></a>3. 自定义显示</h2><p>上述命令在某些情况下可能并不能满足我们的需求，比如<code>--format=oneline</code>选项没有显示提交时间。因此我们需要自定义log显示的方式。git提供了对commit信息中各部分的描述符号，可以让我们方便地自定义log显示。</p><p>下面列出了常见的选项：</p><table><thead><tr><th>选项</th><th>全称</th><th>含义</th></tr></thead><tbody><tr><td>%cd</td><td>commit date</td><td>提交日期</td></tr><tr><td>%H</td><td>Hash</td><td>commit 的完整哈希串</td></tr><tr><td>%h</td><td>hash</td><td>commit 的简短哈希串</td></tr><tr><td>%an</td><td>author name</td><td>提交者名字</td></tr><tr><td>%ae</td><td>author email</td><td>提交者邮箱</td></tr><tr><td>%s</td><td>message</td><td>提交信息</td></tr></tbody></table><p>利用这些描述符，我们可以定制log显示格式，比如<code>git log --format=&quot;%cd|%h|%an|%ae|%s&quot;</code> 就是显示提交日期，commit简短hash，提交者的名字和邮箱，以及提交内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2022-03-23 09:52:22 +0100|b2e23d05|Johan Mabille|johan.mabille@gmail.com|Merge pull request <span class="comment">#2497 from spectre-ns/master</span></span><br><span class="line">2022-03-18 20:59:53 -0300|a5a70449|spectre-ns|dahubley@hotmail.ca|Updated C++20 option <span class="keyword">for</span> visual studio builds C++2a no longer a valid std option.</span><br><span class="line">2022-03-18 10:59:57 +0100|f603205a|Johan Mabille|johan.mabille@gmail.com|Merge pull request <span class="comment">#2496 from JohanMabille/adapt_doc</span></span><br></pre></td></tr></table></figure><h2 id="4-命令组合"><a href="#4-命令组合" class="headerlink" title="4. 命令组合"></a>4. 命令组合</h2><p>git log最强大的地方在于可以组合上述所有的选项，大大缩小搜索范围，能更方便地定位到想要的提交。例如我通过下面的命令，可以将搜索范围从3711条缩小到6条：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有提交记录，共3177条</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline |wc</span><br><span class="line">3177   19594  159959</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加搜索过滤，只剩6条</span></span><br><span class="line">$ git <span class="built_in">log</span> --since=<span class="string">&quot;2020-01-01&quot;</span> --until=<span class="string">&quot;2020-02-01&quot;</span> --grep fix --oneline</span><br><span class="line">af5cc6c4 Merge pull request <span class="comment">#1904 from BioDataAnalysis/emmenlau_tiny_variable_name_fix</span></span><br><span class="line">0f3caa37 benchmark/CMakeLists.txt: fixed a tiny spelling mistake</span><br><span class="line">218dcbe7 Merge pull request <span class="comment">#1902 from kolibri91/fix_warning</span></span><br><span class="line">38cb9617 Merge pull request <span class="comment">#1886 from wolfv/fix_reshape_return</span></span><br><span class="line">31cbd6d2 Merge pull request <span class="comment">#1880 from wolfv/fix_older_cmake</span></span><br><span class="line">f363e9d1 fix older cmak</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;0-概述&quot;&gt;&lt;a href=&quot;#0-概述&quot; class=&quot;headerlink&quot; title=&quot;0. 概述&quot;&gt;&lt;/a&gt;0. 概述&lt;/h2&gt;&lt;p&gt;git log 是查看git提交记录的一个命令，它有非常多的控制参数和选项，合理使用的话，可以达到任何的精准控制目的。这里列一些日常使用可能会用到的用法，全部的用法，请在命令行&lt;code&gt;git help log&lt;/code&gt;查看。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="Git" scheme="http://vra.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>从Python传递参数到C++</title>
    <link href="http://vra.github.io/2022/03/20/cpp-read-binary-file-from-python/"/>
    <id>http://vra.github.io/2022/03/20/cpp-read-binary-file-from-python/</id>
    <published>2022-03-20T13:05:30.000Z</published>
    <updated>2022-03-20T14:02:56.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>有些场景下，需要将Python里面计算得到的参数或者结果传入到C++来进行工程部署。一个常见问题是，Python该以什么格式 (二进制还是文本) 保存这些参数，然后从C++代码里面来读取呢，各有什么优劣？这里我们简单实验一下，并写一些趁手的代码，供查阅。</p><span id="more"></span><h2 id="二进制格式和文本格式对比"><a href="#二进制格式和文本格式对比" class="headerlink" title="二进制格式和文本格式对比"></a>二进制格式和文本格式对比</h2><p>假设我们有一组参数是存储在Numpy的<code>ndarray</code>格式中的，为了在C++中使用，我们需要保存它们到硬盘的文件中。一般有两种保存方法：二进制文件保存和文本文件保存。</p><p>假设我们有一个1024x1024的浮点型参数待保存：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = np.random.rand(<span class="number">1024</span>, <span class="number">1024</span>).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br></pre></td></tr></table></figure><p>二进制保存很简单，直接调用Numpy的<code>tofile</code>文件即可：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params.tofile(<span class="string">&quot;params.bin&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果用文本文件保存，有两种保存方式，分别为调用<code>savetxt</code>函数和将每个值转换为<code>str</code>并用分隔符分开依次存入文件:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文本文件保存方式1</span></span><br><span class="line">np.savetxt(<span class="string">&quot;params_1.txt&quot;</span>, params)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本文件保存方式2</span></span><br><span class="line">delimiter = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;params_2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> params:</span><br><span class="line">        f.write(<span class="built_in">str</span>(p) + delimiter)</span><br></pre></td></tr></table></figure><p>猜猜看这三种情况分别大小是多少？</p><p>结论如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4.0M params.bin</span><br><span class="line">25M params_1.txt</span><br><span class="line">11M params_2.txt</span><br></pre></td></tr></table></figure><p>可以看到，二进制格式存储空间是最小的，分别是两种文本形式存储空间的16%和36%，存储压缩比例还是比较明显的。</p><p>因此推荐以二进制形式存储, 存储脚本简单总结如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># rand默认格式是float64，我们使用float32就可以</span></span><br><span class="line">params = np.random.rand(<span class="number">1024</span>, <span class="number">1024</span>).astype(<span class="string">&quot;float32&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉平成一维，为了在C++里面方便处理</span></span><br><span class="line">params = params.flatten()</span><br><span class="line"></span><br><span class="line">params.tofile(<span class="string">&quot;params.bin&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="C-读取二进制文件"><a href="#C-读取二进制文件" class="headerlink" title="C++ 读取二进制文件"></a>C++ 读取二进制文件</h2><p>C++ 去读二进制的代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read_binary</span><span class="params">(<span class="keyword">const</span> std::string &amp;file_path, <span class="keyword">float</span> *data, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">  std::ifstream in_file;</span><br><span class="line">  in_file.<span class="built_in">open</span>(file_path, std::ios::binary | std::ios::in);</span><br><span class="line">  in_file.<span class="built_in">read</span>((<span class="keyword">char</span> *)data, size * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>));</span><br><span class="line">  in_file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::string file_path = <span class="string">&quot;params.bin&quot;</span>;</span><br><span class="line">  <span class="keyword">int</span> size = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用stack上空间来创建数组，有大小限制，不推荐</span></span><br><span class="line">  <span class="comment">// float params[size];</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用new来构建heap上空间, 无大小限制，但需要自己释放内存</span></span><br><span class="line">  <span class="keyword">float</span> *params = <span class="keyword">new</span> <span class="keyword">float</span>[size];</span><br><span class="line">  <span class="built_in">read_binary</span>(file_path, params, size);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印前10个参数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    std::cout &lt;&lt; params[i] &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意新建数组的时候，有在栈上或者堆上构建两种方式，栈上构建有大小限制，如果数组维度太大就会报错，如下面的代码:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行会报错:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ g++ stack_over.cpp &amp;&amp; ./a.out</span><br><span class="line">[1]    89415 segmentation fault  ./a.out</span><br></pre></td></tr></table></figure><p>因此推荐用堆上创建数组，详见上述代码的注释。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;有些场景下，需要将Python里面计算得到的参数或者结果传入到C++来进行工程部署。一个常见问题是，Python该以什么格式 (二进制还是文本) 保存这些参数，然后从C++代码里面来读取呢，各有什么优劣？这里我们简单实验一下，并写一些趁手的代码，供查阅。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://vra.github.io/tags/Python/"/>
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="C++" scheme="http://vra.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch模型转ONNX时cross操作不支持的解决方法</title>
    <link href="http://vra.github.io/2022/03/20/pytorch-cross-to-onnx/"/>
    <id>http://vra.github.io/2022/03/20/pytorch-cross-to-onnx/</id>
    <published>2022-03-20T10:34:46.000Z</published>
    <updated>2022-03-20T11:50:08.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Pytorch很灵活，支持各种OP和Python的动态语法。但是转换到onnx的时候，有些OP（目前）并不支持，比如<code>torch.cross</code>。这里以一个最小化的例子来演示这个过程，以及对应的解决办法。</p><span id="more"></span><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>考虑下面这个简单的Pytorch转ONNX的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># file name: pytorch_cross_to_onnx.py</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line">        self.conv = nn.Conv2d(<span class="number">3</span>, <span class="number">10</span>, <span class="number">3</span>, stride=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = torch.cross(x, x)</span><br><span class="line">        y = self.conv(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = MyModel()</span><br><span class="line"></span><br><span class="line">dummy_input = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>, device=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">input_names = [<span class="string">&quot;x&quot;</span>]</span><br><span class="line">output_names = [<span class="string">&quot;y&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># opset_version 选择范围：[7,15]</span></span><br><span class="line">torch.onnx.export(</span><br><span class="line">    model,</span><br><span class="line">    dummy_input,</span><br><span class="line">    <span class="string">&quot;my_model.onnx&quot;</span>,</span><br><span class="line">    input_names=input_names,</span><br><span class="line">    output_names=output_names,</span><br><span class="line">    opset_version=<span class="number">14</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>运行这个脚本，会报下面的错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 pytorch_cross_to_onnx.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;pytorch_cross.py&quot;</span>, line 25, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    torch.onnx.export(model, dummy_input, <span class="string">&quot;my_model.onnx&quot;</span>, input_names=input_names, output_names=output_names, opset_version=14)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/__init__.py&quot;</span>, line 320, <span class="keyword">in</span> <span class="built_in">export</span></span><br><span class="line">    custom_opsets, enable_onnx_checker, use_external_data_format)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/utils.py&quot;</span>, line 111, <span class="keyword">in</span> <span class="built_in">export</span></span><br><span class="line">    custom_opsets=custom_opsets, use_external_data_format=use_external_data_format)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/utils.py&quot;</span>, line 729, <span class="keyword">in</span> _export</span><br><span class="line">    dynamic_axes=dynamic_axes)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/utils.py&quot;</span>, line 501, <span class="keyword">in</span> _model_to_graph</span><br><span class="line">    module=module)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/utils.py&quot;</span>, line 216, <span class="keyword">in</span> _optimize_graph</span><br><span class="line">    graph = torch._C._jit_pass_onnx(graph, operator_export_type)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/__init__.py&quot;</span>, line 373, <span class="keyword">in</span> _run_symbolic_function</span><br><span class="line">    <span class="built_in">return</span> utils._run_symbolic_function(*args, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/utils.py&quot;</span>, line 1028, <span class="keyword">in</span> _run_symbolic_function</span><br><span class="line">    symbolic_fn = _find_symbolic_in_registry(domain, op_name, opset_version, operator_export_type)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/utils.py&quot;</span>, line 982, <span class="keyword">in</span> _find_symbolic_in_registry</span><br><span class="line">    <span class="built_in">return</span> sym_registry.get_registered_op(op_name, domain, opset_version)</span><br><span class="line">  File <span class="string">&quot;/usr/local/lib/python3.7/site-packages/torch/onnx/symbolic_registry.py&quot;</span>, line 125, <span class="keyword">in</span> get_registered_op</span><br><span class="line">    raise RuntimeError(msg)</span><br><span class="line">RuntimeError: Exporting the operator cross to ONNX opset version 14 is not supported. Please feel free to request support or submit a pull request on PyTorch GitHub.</span><br></pre></td></tr></table></figure><p>注意最后一句的报错:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RuntimeError: Exporting the operator cross to ONNX opset version 14 is not supported. Please feel free to request support or submit a pull request on PyTorch GitHub.</span><br></pre></td></tr></table></figure><p>也就是说目前版本是不支持<code>torch.cross</code>转onnx的，同时提示你”feel free” 去Pytorch 的 GitHub 上提交/贡献一个转换操作。不过2020年03月就有人提了<a href="https://github.com/onnx/onnx/issues/2683">issue</a>，至今仍没有g官方的解决方案。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>上面的issue里有人给出了解决思路，就是用元素相乘替代<code>cross</code>操作。具体来说，实现如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_cross</span>(<span class="params">x, y, dim=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">assert</span> x.dim() == y.dim() <span class="keyword">and</span> dim &lt; x.dim()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> torch.stack(</span><br><span class="line">        (</span><br><span class="line">            x[:, <span class="number">1</span>, ...] * y[:, <span class="number">2</span>, ...] - x[:, <span class="number">2</span>, ...] * y[:, <span class="number">1</span>, ...],</span><br><span class="line">            x[:, <span class="number">2</span>, ...] * y[:, <span class="number">0</span>, ...] - x[:, <span class="number">0</span>, ...] * y[:, <span class="number">2</span>, ...],</span><br><span class="line">            x[:, <span class="number">0</span>, ...] * y[:, <span class="number">1</span>, ...] - x[:, <span class="number">1</span>, ...] * y[:, <span class="number">0</span>, ...],</span><br><span class="line">        ),</span><br><span class="line">        dim=dim,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><strong>注意：这里是以dim=1为例写的实现，如果是在别的维度进行cross操作，需要修改dim参数，同时修改对应stack的维度。</strong></p><p>同时在Pytorch doc网站上看到，如果<code>torch.cross</code>不指定<code>dim</code>参数的话，默认是从前往后找第一个维度为3的维度，因此这个可能是你所不期望的，建议显式指定这个参数。</p><p>因此总结下来，下面是修改后的代码:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_cross</span>(<span class="params">x, y, dim=<span class="number">1</span></span>):</span></span><br><span class="line">    <span class="keyword">assert</span> x.dim() == y.dim() <span class="keyword">and</span> dim &lt; x.dim()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> torch.stack(</span><br><span class="line">        (</span><br><span class="line">            x[:, <span class="number">1</span>, ...] * y[:, <span class="number">2</span>, ...] - x[:, <span class="number">2</span>, ...] * y[:, <span class="number">1</span>, ...],</span><br><span class="line">            x[:, <span class="number">2</span>, ...] * y[:, <span class="number">0</span>, ...] - x[:, <span class="number">0</span>, ...] * y[:, <span class="number">2</span>, ...],</span><br><span class="line">            x[:, <span class="number">0</span>, ...] * y[:, <span class="number">1</span>, ...] - x[:, <span class="number">1</span>, ...] * y[:, <span class="number">0</span>, ...],</span><br><span class="line">        ),</span><br><span class="line">        dim=dim,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line">        self.conv = nn.Conv2d(<span class="number">3</span>, <span class="number">10</span>, <span class="number">3</span>, stride=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="comment"># x = torch.cross(x, x)</span></span><br><span class="line">        x = my_cross(x, x)</span><br><span class="line">        y = self.conv(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = MyModel()</span><br><span class="line"></span><br><span class="line">dummy_input = torch.randn(<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>, device=<span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">output = model(dummy_input)</span><br><span class="line">input_names = [<span class="string">&quot;x&quot;</span>]</span><br><span class="line">output_names = [<span class="string">&quot;y&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># opset_version 选择范围：[7,15]</span></span><br><span class="line">torch.onnx.export(</span><br><span class="line">    model,</span><br><span class="line">    dummy_input,</span><br><span class="line">    <span class="string">&quot;my_model.onnx&quot;</span>,</span><br><span class="line">    input_names=input_names,</span><br><span class="line">    output_names=output_names,</span><br><span class="line">    opset_version=<span class="number">14</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了验证我们的实现与Pytorch的实现是否一致，可以用下面的函数验证:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_torch_cross_and_my_cross</span>():</span></span><br><span class="line">    x = torch.randn(<span class="number">10</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    y = torch.randn(<span class="number">10</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my_cross == torch.cross:&quot;</span>, torch.allclose(torch.cross(x, y), my_cross(x, y)))</span><br></pre></td></tr></table></figure><p>执行后输出如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">my_cross == torch.cross: True</span><br></pre></td></tr></table></figure><p>说明这个实现是正确的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/onnx/onnx/issues/2683">https://github.com/onnx/onnx/issues/2683</a></li><li><a href="https://pytorch.org/docs/stable/generated/torch.cross.html">https://pytorch.org/docs/stable/generated/torch.cross.html</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Pytorch很灵活，支持各种OP和Python的动态语法。但是转换到onnx的时候，有些OP（目前）并不支持，比如&lt;code&gt;torch.cross&lt;/code&gt;。这里以一个最小化的例子来演示这个过程，以及对应的解决办法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://vra.github.io/tags/Python/"/>
    
    <category term="Deep Learning" scheme="http://vra.github.io/tags/Deep-Learning/"/>
    
    <category term="Pytorch" scheme="http://vra.github.io/tags/Pytorch/"/>
    
    <category term="ONNX" scheme="http://vra.github.io/tags/ONNX/"/>
    
    <category term="Torchscript" scheme="http://vra.github.io/tags/Torchscript/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="http://vra.github.io/2021/12/31/summary-2021/"/>
    <id>http://vra.github.io/2021/12/31/summary-2021/</id>
    <published>2021-12-31T11:53:14.000Z</published>
    <updated>2022-01-01T01:01:02.256Z</updated>
    
    <content type="html"><![CDATA[<p>2021快结束了，看的年初定的14条大大小小的目标，完成的只有三四条，惨不忍睹。这里总结一下这一年的大大小小的事情，留一个纪念。</p><span id="more"></span><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>总体来说2021是平稳的一年，工作大部分时候有序进行，同事和领导们待人友善，团队氛围和谐，夫妻感情和睦，家人身体都还算好，收入够日常开销，在一个城市的同学朋友们能偶尔聚聚，聊天吃饭，这样想想就已经很知足了。</p><p>工作方面还是有很多可以改进的地方的。<br>之前的工作思维是快速完成功能，导致很多代码都未经打磨，充满各种问题。今年也看到一些比较好的身边的例子，决定放慢速度，以创造作品的方式来写代码，多考虑可用性，边界条件和文档。团队整体的节奏其实是允许这样做的，只不过以前做了一个粗糙版本就去干别的了，没有真正地做好它。</p><p>还有一个是对偏理论的知识的畏惧感需要克服。总体来说这还是惰性思维的表现，不愿意深入地探索背后的原理。</p><p>更多的时间去改造自己，学习新知，更好地为社会创造价值。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><p>今年团队参加了一个ICCV比赛，并且拿到了第一名，算是在技术上取得了一个成果，真诚地感谢一起努力的小伙伴。  </p><p>开源项目上，没有新的进展，前一段时间把flopth的功能加强了一下，后面会写一个更全面的说明。  </p><p>博客更新了14篇，总体达到每个月一篇的目标了，但质量还需要提高。  </p><h4 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h4><p>年初定了读书202.1小时的目标，不过没达到，新的一年继续努力。<br>读完了的几本书：</p><ul><li> 老残游记》</li><li>儒林外史》</li><li>《毛泽东的书单》</li><li>《万历十五年》</li><li>《老舍和他的作品》</li></ul><p>读了一部分的书:</p><ul><li>《雨》</li><li>《我的个天》</li><li>《西行漫记》</li><li>《能人》</li><li>《中外名画彩图馆》</li></ul><h4 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h4><p>周末大部分时间会刷一刷剧，所以今年电影和剧集看的挺多的。还是有许多好看的电影，给人感动。</p><ul><li>《苍穹浩瀚》惊喜连连的太空剧，强烈推荐</li><li>《健听女孩》</li><li>《基地》</li><li>《鹰眼》</li><li>《假如…？》</li><li>《洛基》</li><li>《猎鹰与冬兵》</li><li>《旺达幻视》</li><li>《x特遣队》</li><li>《倒数时刻》</li><li>《芬奇》</li><li>《性教育第三季》</li><li>《黑寡妇》</li><li>《尚气与十环传奇》</li><li>《红色通缉令》</li><li>《大佛普拉斯》</li><li>《同学麦娜丝》</li><li>《杀手妻子的保镖2》</li><li>《寂静之地2》</li><li>《爱，死亡与机器人2》</li><li>《雪国列车》</li><li>《活着》</li></ul><h4 id="相聚时刻"><a href="#相聚时刻" class="headerlink" title="相聚时刻"></a>相聚时刻</h4><p>这一年，和同学，同事，家人相聚的次数还比较多，每次相聚都值得纪念，这里把这些欢聚时刻都记录下来。</p><ul><li>1.3日，和研究生张鹏师兄，孙翠蓉师姐，吕玥和sun可在张鹏师兄家聚餐</li><li>2月12日，在杭州和彤彤过春节</li><li>3月27日，清明前一周，我回家里,和爸还有外甥女听听去上坟。这是爷爷奶奶去世十余年，第一次去给他们上坟。</li><li>4月11日，和高中同学马仲海在西湖边的清真餐厅聚餐，他来杭州参加会议。</li><li>6月5日，我去吉林榆树参加大学同学栾京的婚礼，这也是我第一次去东北。东北一望无际的平原让人印象深刻。第二天我们凌晨2点起来去准备接亲，那边凌晨四点天就亮了。</li><li>6月14日，和旸哥杨珈蒙在公司打羽毛球，打完后去陕西面馆吃了大盘鸡。</li><li>6月15日，和在阿里的武山老乡聚了餐，加了初中同级同学孙健的微信。</li><li>6月26日，天琦师兄来附近找房子，我带他们看了房子，然后去亲橙里吃了烤鱼。</li><li>7月2日，团队组织去舟山市的普陀山和东极岛团建，在祖国的最东边度过了几天难忘的日子。</li><li>7月24日，和彤彤回庄浪，参加彤彤大姐的婚礼。爸妈在岳父岳母的邀请下，也到庄浪了，彤彤妹妹和妹夫也从江苏赶过来，我们在庄浪待了逛了好几天。因为疫情的原因多请了一天假。</li><li>8月15日，我和彤彤和刘凯旋夫妻俩还有华哥在天街吃了饭。</li><li>国庆节，我和彤彤回家了，云亮也回家了，全家给云亮过了生日。回家搬玉米，剥玉米，劳动了一下。</li><li>10月10日，实验室师弟鹤臻来参加VALSE，我也赶过去参加了这次会议，结束后我们去吃了饭，聊了聊实验室最近的事情。</li><li>11月16日，高中同学小雨来杭州出差，我下班后去找他，他请我们吃了烤肉，吃完后我们去星巴克坐了会，聊了很多关于创业的事情，他现在是在投资机构上班。</li><li>11月20日，实验室师弟周浩来杭州参加校招活动，我们召集了小天和师妹魏承承，在新榆园吃了饭，后面又和周浩在园区食堂吃了饭</li><li>11月22日，和张鹏师兄，孙可在园区吃了面。</li><li>12月29日，小组去爬了西湖群山，从老和云起到秦亭，再到灵峰山，最后去了北高峰，然后下山。</li></ul><p>除了这些具体的相聚时刻，公司小组时常在开完组会后去聚餐，塞远带我们吃遍了周围的各种饭店，这些时刻都值得纪念。一个温和的团队值得珍惜，给了我们稳定的工作环境，可以专心做自己喜欢的事情，确实很难得，因此更要倍加珍惜。</p><h4 id="最后的感想"><a href="#最后的感想" class="headerlink" title="最后的感想"></a>最后的感想</h4><p>相比去年，今年的我多了一些笃定吧。这一年发生了很多事情，个人，公司，国家。总体来说，这是往好发展的一年，通过一年的工作，渐渐想通了，通过现在的工作，积累的知识和能力，会在未来某个时间点达到质变，因此别太着急，努力地去做好每件事情，写好每行代码，写好每个注释，写好每个文档，搞懂每个疑惑，弄懂每个知识点，会往好的方向发展的。</p><p>最近读了《西行漫记》，为其中的红军的精神所感染，反观自己现在的状态，用文中的话来说，是“消极的满足”，没有持久的梦想驱动。这种状态确实挺可怕的，所以新的一年，要想清楚未来几年的目标，持续地朝这个目标努力，保持积极的求索，跳出消极的满足的温水煮青蛙陷阱。</p><p>毕业已经三年，刚毕业定了一个三年的目标，现在看来基本都没实现。这还是对我有很大的警醒作用的。下一个三年，是不是还会继续这样失败呢，如何才能定好三年目标并一步步完成它呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021快结束了，看的年初定的14条大大小小的目标，完成的只有三四条，惨不忍睹。这里总结一下这一年的大大小小的事情，留一个纪念。&lt;/p&gt;</summary>
    
    
    
    
    <category term="年终总结" scheme="http://vra.github.io/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    <category term="2021" scheme="http://vra.github.io/tags/2021/"/>
    
  </entry>
  
  <entry>
    <title>Mac OpenGL入门：显示颜色</title>
    <link href="http://vra.github.io/2021/11/21/mac-opengl-red/"/>
    <id>http://vra.github.io/2021/11/21/mac-opengl-red/</id>
    <published>2021-11-21T08:18:23.000Z</published>
    <updated>2021-11-21T08:34:06.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这里以显示一个红色的窗口为例，展示Mac下运行OpenGL代码的一些配置项。这里采用c++ 和cmake来编译代码的方式，比用xcode更直观。</p><span id="more"></span><h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install glfw3 glew cmake</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>C++源码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(GLFWwindow* window)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(GLFWwindow* window, <span class="keyword">double</span> currentTime)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">glfwInit</span>()) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mac增加的代码</span></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br><span class="line"></span><br><span class="line">    GLFWwindow* window = <span class="built_in">glfwCreateWindow</span>(<span class="number">600</span>, <span class="number">600</span>, <span class="string">&quot;Chapter 2 - program1&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">glewInit</span>() != GLEW_OK) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwSwapInterval</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>(window);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window)) &#123;</span><br><span class="line">        <span class="built_in">display</span>(window, <span class="built_in">glfwGetTime</span>());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwDestroyWindow</span>(window);</span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cmake文件"><a href="#cmake文件" class="headerlink" title="cmake文件"></a>cmake文件</h2><p>cmake 代码：</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(show_box)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(/usr/local/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(/usr/local/Cellar/glew/<span class="number">2.2</span>.<span class="number">0</span>_1/lib)</span><br><span class="line"><span class="keyword">link_directories</span>(/usr/local/Cellar/glfw/<span class="number">3.3</span>.<span class="number">4</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> ch2.<span class="number">1</span>.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">GLEW</span><br><span class="line">GLFW</span><br><span class="line"><span class="string">&quot;-framework OpenGL&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line">./show_box</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;这里以显示一个红色的窗口为例，展示Mac下运行OpenGL代码的一些配置项。这里采用c++ 和cmake来编译代码的方式，比用xcode更直观。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C++" scheme="http://vra.github.io/tags/C/"/>
    
    <category term="Mac" scheme="http://vra.github.io/tags/Mac/"/>
    
    <category term="OpenGL" scheme="http://vra.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>Mac上如何运行OpenGL:第一个例子</title>
    <link href="http://vra.github.io/2021/11/20/mac-opengl-first-example/"/>
    <id>http://vra.github.io/2021/11/20/mac-opengl-first-example/</id>
    <published>2021-11-20T00:33:37.000Z</published>
    <updated>2021-11-20T00:46:09.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>搜索发现，OpengGL在mac下其实运行还是比较容易的，这里做一个简单的总结。</p><span id="more"></span><h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><p>安装依赖项:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install glfw3 glew cmake</span><br></pre></td></tr></table></figure><h2 id="编写OpenGL代码"><a href="#编写OpenGL代码" class="headerlink" title="编写OpenGL代码"></a>编写OpenGL代码</h2><p>编写OpenGL代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> &lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GLFWwindow* window;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize the library */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">glfwInit</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create a windowed mode window and its OpenGL context */</span></span><br><span class="line">    window = <span class="built_in">glfwCreateWindow</span>(<span class="number">640</span>, <span class="number">480</span>, <span class="string">&quot;Hello World&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!window)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">glfwTerminate</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make the window&#x27;s context current */</span></span><br><span class="line">    <span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Loop until the user closes the window */</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Render here */</span></span><br><span class="line">        <span class="comment">/* Swap front and back buffers */</span></span><br><span class="line">        <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">        <span class="comment">/* Poll for and process events */</span></span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="编写CMake-配置文件"><a href="#编写CMake-配置文件" class="headerlink" title="编写CMake 配置文件"></a>编写CMake 配置文件</h2><p>为了简单可复现，这里我们直接编写<code>CMakeLists.txt</code>, 内容如下：</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(opengl_first_example)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(/usr/local/<span class="keyword">include</span>)</span><br><span class="line"><span class="keyword">link_directories</span>(/usr/local/Cellar/glew/<span class="number">2.2</span>.<span class="number">0</span>_1/lib)</span><br><span class="line"><span class="keyword">link_directories</span>(/usr/local/Cellar/glfw/<span class="number">3.3</span>.<span class="number">4</span>/lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> GLEW GLFW)</span><br></pre></td></tr></table></figure><p><strong>需要修改其中第5行和第6行路径中的glew和glfw为你自己电脑安装的版本</strong></p><h2 id="编译执行代码"><a href="#编译执行代码" class="headerlink" title="编译执行代码"></a>编译执行代码</h2><p>编译代码，使用CMake的常规流程:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake .. </span><br><span class="line">make -j8 </span><br></pre></td></tr></table></figure><p>编译完成后运行生成的可执行文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./opengl_first_example</span><br></pre></td></tr></table></figure><p>可以看到一个图窗弹出来，说明OpenGL调用成功了.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/153550789">https://zhuanlan.zhihu.com/p/153550789</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;搜索发现，OpengGL在mac下其实运行还是比较容易的，这里做一个简单的总结。&lt;/p&gt;</summary>
    
    
    
    
    <category term="C++" scheme="http://vra.github.io/tags/C/"/>
    
    <category term="macOS" scheme="http://vra.github.io/tags/macOS/"/>
    
    <category term="OpenGL" scheme="http://vra.github.io/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>检测Python代码中没有用到的函数和变量</title>
    <link href="http://vra.github.io/2021/11/07/detect-unused-function-and-variable-in-python/"/>
    <id>http://vra.github.io/2021/11/07/detect-unused-function-and-variable-in-python/</id>
    <published>2021-11-07T11:57:22.000Z</published>
    <updated>2021-11-07T12:09:02.560Z</updated>
    
    <content type="html"><![CDATA[<p>在重构Python代码的时候，需要统计有哪些函数和变量没有用到，搜索后发现一个简单的工具<a href="https://pypi.org/project/vulture/">vulture</a>，可以完成这个功能。 </p><p>操作也很简单, pip 安装包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install vulture</span><br></pre></td></tr></table></figure><p>检测代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vulture tester.py</span><br></pre></td></tr></table></figure><p>输出大概是这样:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tester.py:19: unused import <span class="string">&#x27;time&#x27;</span> (90% confidence)</span><br><span class="line">tester.py:181: unused variable <span class="string">&#x27;raw_img&#x27;</span> (100% confidence)</span><br><span class="line">tester.py:300: unused method <span class="string">&#x27;run_on_video&#x27;</span> (60% confidence)</span><br><span class="line">tester.py:403: unused method <span class="string">&#x27;render_results&#x27;</span> (60% confidence)</span><br></pre></td></tr></table></figure><p>可以看到，每一行是一个检测结果，包含文件名称，行数，检测结果以及检测的置信度，可以根据这个输出来重构代码。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol><li><a href="https://stackoverflow.com/questions/693070/how-can-you-find-unused-functions-in-python-code">https://stackoverflow.com/questions/693070/how-can-you-find-unused-functions-in-python-code</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在重构Python代码的时候，需要统计有哪些函数和变量没有用到，搜索后发现一个简单的工具&lt;a href=&quot;https://pypi.org/project/vulture/&quot;&gt;vulture&lt;/a&gt;，可以完成这个功能。 &lt;/p&gt;
&lt;p&gt;操作也很简单, pip 安装包：&lt;/p</summary>
      
    
    
    
    
    <category term="Python" scheme="http://vra.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>neovim/vim 中遇到jedi-vim 插件报错解决</title>
    <link href="http://vra.github.io/2021/11/06/neovim-jedi-error/"/>
    <id>http://vra.github.io/2021/11/06/neovim-jedi-error/</id>
    <published>2021-11-06T06:45:03.000Z</published>
    <updated>2021-11-06T06:56:25.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><a href="https://github.com/davidhalter/jedi-vim">jedi-vim</a>是vim/neovim的Python代码自动补全插件，很好用，不过最近遇到这样一个问题，用neovim 打开python文件时，会有这样的提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: jedi-vim failed to initialize Python: jedi<span class="comment">#setup_python_imports: ImportError: bad magic number in &#x27;jedi.common&#x27;:</span></span><br></pre></td></tr></table></figure><p>这里记录一下解决办法.</p><span id="more"></span><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这个问题可能是更新<code>jedi-vim</code>插件时, 缓存的<code>.pyc</code> 文件没删除导致的，因此我们找到插件目录，手动删除这种类型的文件就行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果使用的是vim，将下面路径中的~/.nvim 替换为~/.vim</span></span><br><span class="line"><span class="built_in">cd</span> ~/.nvim/bundle/jedi-vim</span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.pyc&quot;</span> -<span class="built_in">exec</span> rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/davidhalter/jedi-vim/issues/1026">https://github.com/davidhalter/jedi-vim/issues/1026</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/davidhalter/jedi-vim&quot;&gt;jedi-vim&lt;/a&gt;是vim/neovim的Python代码自动补全插件，很好用，不过最近遇到这样一个问题，用neovim 打开python文件时，会有这样的提示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Error: jedi-vim failed to initialize Python: jedi&lt;span class=&quot;comment&quot;&gt;#setup_python_imports: ImportError: bad magic number in &amp;#x27;jedi.common&amp;#x27;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里记录一下解决办法.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://vra.github.io/tags/Python/"/>
    
    <category term="总结" scheme="http://vra.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="错误汇总" scheme="http://vra.github.io/tags/%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
    
    <category term="neovim" scheme="http://vra.github.io/tags/neovim/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下 Unable to load OpenGL library 的解决办法</title>
    <link href="http://vra.github.io/2021/11/04/mac-opengl-load-error/"/>
    <id>http://vra.github.io/2021/11/04/mac-opengl-load-error/</id>
    <published>2021-11-04T12:03:02.000Z</published>
    <updated>2021-11-06T05:12:33.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在Mac上使用Pyrender时，出现了OpenGL无法加载的错误，具体复现情况如下:<br>打开Python的REPL, 输入下面的命令(前提是安装pyrender):</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyrender</span><br></pre></td></tr></table></figure><p>报下面的错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">raise ImportError(<span class="string">&quot;Unable to load OpenGL library&quot;</span>, *err.args)</span><br><span class="line">ImportError: (<span class="string">&#x27;Unable to load OpenGL library&#x27;</span>, <span class="string">&quot;dlopen(OpenGL, 0x000A): tried: &#x27;OpenGL&#x27; (no such file), &#x27;/usr/local/lib/OpenGL&#x27; (no such file), &#x27;/usr/lib/OpenGL&#x27; (no such file), &#x27;/usr/local/lib/OpenGL&#x27; (no such file), &#x27;/usr/lib/OpenGL&#x27; (no such file)&quot;</span>, <span class="string">&#x27;OpenGL&#x27;</span>, None)</span><br></pre></td></tr></table></figure><p>这里记录一下解决的办法。</p><span id="more"></span><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决办法比较简单，首先找到<code>OpenGL</code>的安装目录:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> python3 -c <span class="string">&quot;import OpenGL; print(OpenGL.__path__)&quot;</span></span><br><span class="line"> <span class="comment"># 输出路径</span></span><br><span class="line">[<span class="string">&#x27;/usr/local/lib/python3.7/site-packages/OpenGL&#x27;</span>]</span><br></pre></td></tr></table></figure><p>有了包路径后，修改包目录下的<code>platform/ctypesloader.py</code>文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/lib/python3.7/site-packages/OpenGL/platform/ctypesloader.py</span><br></pre></td></tr></table></figure><p>将第35行注释掉，添加新的一行代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原先的代码</span></span><br><span class="line"><span class="comment">#fullName = util.find_library( name )</span></span><br><span class="line"><span class="comment"># 新的代码</span></span><br><span class="line">fullName = <span class="string">&#x27;/System/Library/Frameworks/OpenGL.framework/OpenGL&#x27;</span></span><br></pre></td></tr></table></figure><p>然后就可以正常运行了。<br>注意：不用确认路径<code>/System/Library/Frameworks/OpenGL.framework/OpenGL</code>是否存在，只需原样修改代码即可.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://stackoverflow.com/questions/63475461/unable-to-import-opengl-gl-in-python-on-macos/64021312#64021312">https://stackoverflow.com/questions/63475461/unable-to-import-opengl-gl-in-python-on-macos/64021312#64021312</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在Mac上使用Pyrender时，出现了OpenGL无法加载的错误，具体复现情况如下:&lt;br&gt;打开Python的REPL, 输入下面的命令(前提是安装pyrender):&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pyrender&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;报下面的错：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;raise ImportError(&lt;span class=&quot;string&quot;&gt;&amp;quot;Unable to load OpenGL library&amp;quot;&lt;/span&gt;, *err.args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImportError: (&lt;span class=&quot;string&quot;&gt;&amp;#x27;Unable to load OpenGL library&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;dlopen(OpenGL, 0x000A): tried: &amp;#x27;OpenGL&amp;#x27; (no such file), &amp;#x27;/usr/local/lib/OpenGL&amp;#x27; (no such file), &amp;#x27;/usr/lib/OpenGL&amp;#x27; (no such file), &amp;#x27;/usr/local/lib/OpenGL&amp;#x27; (no such file), &amp;#x27;/usr/lib/OpenGL&amp;#x27; (no such file)&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;OpenGL&amp;#x27;&lt;/span&gt;, None)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里记录一下解决的办法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="http://vra.github.io/tags/Python/"/>
    
    <category term="总结" scheme="http://vra.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="macOS" scheme="http://vra.github.io/tags/macOS/"/>
    
    <category term="OpenGL" scheme="http://vra.github.io/tags/OpenGL/"/>
    
    <category term="错误汇总" scheme="http://vra.github.io/tags/%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>git 从别的分支复制文件或目录</title>
    <link href="http://vra.github.io/2021/09/25/git-copy-from-another-branch/"/>
    <id>http://vra.github.io/2021/09/25/git-copy-from-another-branch/</id>
    <published>2021-09-25T02:46:43.000Z</published>
    <updated>2021-09-25T03:22:48.049Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们需要从别的分支复制文件或者目录，这里总结一些简单的命令供查看。</p><span id="more"></span><p>假设我们的当前分支为<code>branch1</code>, 想要复制文件或者目录的分支为<code>branch2</code>, 两个分支下文件结构是不同的，具体如下：<br>branch1: </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── cpp</span><br><span class="line">│   ├── include</span><br><span class="line">│   │   └── test.hpp</span><br><span class="line">│   └── src</span><br><span class="line">│       └── test.cpp</span><br><span class="line">└── python</span><br><span class="line">    └── setup.py</span><br></pre></td></tr></table></figure><p>branch2:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">└── java</span><br><span class="line">    └── test.java</span><br><span class="line">    └── main.java</span><br></pre></td></tr></table></figure><p>假设我们当前在<code>branch1</code>, 目录为仓库根目录，想要复制<code>branch2</code> 的 java/test.java` 到当前目录，执行下面的语句:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout branch2 -- java/test.java</span><br></pre></td></tr></table></figure><p><strong>⚠️注意：这里还是会创建一个<code>java</code>目录，而不是把<code>test.java</code>放到根目录下。</strong></p><p>如果当前进入了<code>cpp</code> 子目录，后面的路径也需要改成相对路径:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout branch2 -- ../java/test.java</span><br></pre></td></tr></table></figure><p>如果想要复制整个目录，也是一样的:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout branch2 -- java</span><br></pre></td></tr></table></figure><p>此外还可以利用提交的hash值来复制文件，这样就会复制当次提交时候的文件内容:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout 941b6dd java/test.java</span><br></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://www.tutsway.com/how-to-copy-file-or-folder-from-one-branch-to-another-in-git.php">https://www.tutsway.com/how-to-copy-file-or-folder-from-one-branch-to-another-in-git.php</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;有时候我们需要从别的分支复制文件或者目录，这里总结一些简单的命令供查看。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="总结" scheme="http://vra.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="Git" scheme="http://vra.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>back-to-landscape——博客迁移记录2021</title>
    <link href="http://vra.github.io/2021/09/04/back-to-landscape/"/>
    <id>http://vra.github.io/2021/09/04/back-to-landscape/</id>
    <published>2021-09-04T15:46:21.000Z</published>
    <updated>2021-09-04T16:11:08.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>2019年的时候，写了一篇<a href="https://vra.github.io/2019/02/27/mv-to-next/">博客</a>来记录博客历史的迁移记录，这两年又经过工作变化、硬盘损坏，博客也是几经变迁。</p><p>尝试了基于Go的hugo框架，总体美观度和Hexo还是没法比，因此还是切换回了Hexo，换用了默认的landscape主题，重心放到有效的内容的记录上。评论系统还是采用valine，而在landscape下，设置valine还比Next复杂一些，我从<a href="http://hypo1986.com/blog/2019/06/10/hexo-landscape-add-valine/">这里</a> 看到除了配置landscape项目，还需要在ejs文件里面设置，这里记录下。</p><span id="more"></span><h2 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h2><p>修改主题config 文件 <code>HEXO_ROOT/themes/landscape/_config.yml</code>, 添加下面内容:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># valine comment system. https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># if you want use valine,please set this value is true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">wwwwweirowjreojwreoz</span> <span class="comment"># leancloud application app id</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">weiojwoerjoerj#</span> <span class="string">leancloud</span> <span class="string">application</span> <span class="string">app</span> <span class="string">key</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># valine mail notify (true/false) https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># valine verify code (true/false)</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn</span> <span class="comment"># i18n: zh-cn/en</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎留言交流~~</span> <span class="comment"># valine comment input placeholder(like: Please leave your footprints )</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment">#valine comment header info</span></span><br></pre></td></tr></table></figure><p>appid 和 appkey 从 leancloud 网站获取.</p><p>修改ejs文件<code>HEXO_ROOT/themes/landscape/layout/_partial/after-footer.ejs</code>，添加下面内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(theme.valine.enable &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//unpkg.com/valine/dist/Valine.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> GUEST_INFO = [<span class="string">&#x27;nick&#x27;</span>,<span class="string">&#x27;mail&#x27;</span>,<span class="string">&#x27;link&#x27;</span>];</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> guest_info = <span class="string">&#x27;&lt;%= theme.valine.guest_info %&gt;&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span> GUEST_INFO.indexOf(item) &gt; -<span class="number">1</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> notify = <span class="string">&#x27;&lt;%= theme.valine.notify %&gt;&#x27;</span> == <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> verify = <span class="string">&#x27;&lt;%= theme.valine.verify %&gt;&#x27;</span> == <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">new</span> Valine(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">el</span>: <span class="string">&#x27;.vcomment&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">notify</span>: notify,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">verify</span>: verify,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">appId</span>: <span class="string">&quot;&lt;%= theme.valine.appid %&gt;&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">appKey</span>: <span class="string">&quot;&lt;%= theme.valine.appkey %&gt;&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">placeholder</span>: <span class="string">&quot;&lt;%= theme.valine.placeholder %&gt;&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">pageSize</span>: <span class="string">&#x27;&lt;%= theme.valine.pageSize %&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">avatar</span>: <span class="string">&#x27;&lt;%= theme.valine.avatar %&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">lang</span>: <span class="string">&#x27;&lt;%= theme.valine.lang %&gt;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">visitor</span>: <span class="string">&#x27;true&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>修改<code>HEXO_ROOT/themes/landscape/layout/_partial/article.ejs</code> 文件，最后添加下面内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (!index &amp;&amp; post.comments &amp;&amp; theme.valine.enable &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">class</span>=<span class="string">&quot;vcomment&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;2019年的时候，写了一篇&lt;a href=&quot;https://vra.github.io/2019/02/27/mv-to-next/&quot;&gt;博客&lt;/a&gt;来记录博客历史的迁移记录，这两年又经过工作变化、硬盘损坏，博客也是几经变迁。&lt;/p&gt;
&lt;p&gt;尝试了基于Go的hugo框架，总体美观度和Hexo还是没法比，因此还是切换回了Hexo，换用了默认的landscape主题，重心放到有效的内容的记录上。评论系统还是采用valine，而在landscape下，设置valine还比Next复杂一些，我从&lt;a href=&quot;http://hypo1986.com/blog/2019/06/10/hexo-landscape-add-valine/&quot;&gt;这里&lt;/a&gt; 看到除了配置landscape项目，还需要在ejs文件里面设置，这里记录下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="总结" scheme="http://vra.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="迁移记录" scheme="http://vra.github.io/tags/%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95/"/>
    
    <category term="Hexo" scheme="http://vra.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>C++ 耗时统计代码片段</title>
    <link href="http://vra.github.io/2021/09/04/cpp-time-count/"/>
    <id>http://vra.github.io/2021/09/04/cpp-time-count/</id>
    <published>2021-09-04T03:44:38.000Z</published>
    <updated>2021-09-04T04:25:31.125Z</updated>
    
    <content type="html"><![CDATA[<p>C++ 耗时统计代码片段</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::chrono::milliseconds ms;</span><br><span class="line"><span class="keyword">using</span> clk = std::chrono::system_clock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_my_work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// work code here</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> begin_time = clk::<span class="built_in">now</span>();</span><br><span class="line">    <span class="built_in">do_my_work</span>();</span><br><span class="line"><span class="keyword">auto</span> end_time = clk::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> duration_nn = std::chrono::duration_cast&lt;ms&gt;(end_time - begin_time);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;timecost: &quot;</span> &lt;&lt; (<span class="keyword">double</span>)duration_nn.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C++ 耗时统计代码片段&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="C++" scheme="http://vra.github.io/tags/C/"/>
    
    <category term="总结" scheme="http://vra.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>VIM 查漏补缺</title>
    <link href="http://vra.github.io/2021/08/28/vim-learn/"/>
    <id>http://vra.github.io/2021/08/28/vim-learn/</id>
    <published>2021-08-28T14:56:29.000Z</published>
    <updated>2021-09-04T14:49:31.143Z</updated>
    
    <content type="html"><![CDATA[<p>命令<br>shift-v： 选择一整行</p><p><code>*</code>：向下搜索光标所在的词<br><code>#</code>：向上搜索光标所在的词</p><p><code>w</code>: 移动到下一个单词<br><code>b</code>: 移动到上一个单词<br><code>F</code>: 搜索当前行光标前的字母<br><code>&lt;n&gt;G</code>: 移动到第n行行首<br><code>ctrl-e</code>: 屏幕向下移动，效果同<code>j</code></p><p><code>dgg</code>: 删除文档开头到当前行的内容<br><code>dG</code>: 删除当前行到文档末尾的内容<br><code>ggdG</code>: 删除文档所有内容</p><p><code>dip</code>: 删除当前行所在段落(到下一个空行)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;命令&lt;br&gt;shift-v： 选择一整行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;：向下搜索光标所在的词&lt;br&gt;&lt;code&gt;#&lt;/code&gt;：向上搜索光标所在的词&lt;/p&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt;: 移动到下一个单词&lt;br&gt;&lt;code&gt;b&lt;/code&gt;: 移动到</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://vra.github.io/tags/Linux/"/>
    
    <category term="Vim" scheme="http://vra.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch使用交叉熵损失时的一个坑</title>
    <link href="http://vra.github.io/2021/08/21/pytorch-cross-entropy/"/>
    <id>http://vra.github.io/2021/08/21/pytorch-cross-entropy/</id>
    <published>2021-08-20T23:03:13.000Z</published>
    <updated>2021-08-20T23:25:14.412Z</updated>
    
    <content type="html"><![CDATA[<p>在Pytorch里面使用交叉熵loss函数的时候，发现结果最是比较差，通过搜索才发现这样一段话：</p><blockquote><p>You should pass raw logits to nn.CrossEntropyLoss, since the function itself applies F.log_softmax and nn.NLLLoss() on the input.</p></blockquote><p>也就是用交叉熵损失的时候，不能在网络的最后用 <code>log_softmax</code> 或者 <code>Softmax</code>层，因为交叉熵损失相当与是 <code>log_softmax</code> + <code>NLLLos</code>的组合。</p><p>如果网络最后用了Softmax层的话，需要使用 <code>NLLLoss</code> 或者 <code>MSE loss</code>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ol><li><a href="https://discuss.pytorch.org/t/logsoftmax-vs-softmax/21386/9">https://discuss.pytorch.org/t/logsoftmax-vs-softmax/21386/9</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在Pytorch里面使用交叉熵loss函数的时候，发现结果最是比较差，通过搜索才发现这样一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should pass raw logits to nn.CrossEntropyLoss, since the functio</summary>
      
    
    
    
    
    <category term="Python" scheme="http://vra.github.io/tags/Python/"/>
    
    <category term="Deep Learning" scheme="http://vra.github.io/tags/Deep-Learning/"/>
    
    <category term="Pytorch" scheme="http://vra.github.io/tags/Pytorch/"/>
    
  </entry>
  
</feed>
